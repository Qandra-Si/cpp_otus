// -*- mode: c++; coding: utf-8 -*-
#include <iostream>
#include <iomanip>
#include <vector>


/*! \brief Задача №1506. Столбцы чисел
*
* https://acm.timus.ru/problem.aspx?space=1&num=1506
*
* Каждый новый русский должен просматривать длинные столбцы чисел для анализа
* рыночных тенденций и планирования инвестиций. Психологи заверяют, что чем
* длиннее столбец чисел, тем труднее его воспринимать. Поэтому лучше печатать
* числа не в один длинный столбец, а в несколько столбцов, так что их высота
* минимальна. Преобразуйте заданную последовательность чисел в формат,
* психологически более подходящий для восприятия.
*
* Исходные данные: Первая строка содержит два целых числа: N (1 <= N <= 100),
* которое показывает, сколько чисел нужно проанализировать, и K (1 <= K <= N),
* желаемое число столбцов. Вторая строка содержит N целых чисел в диапазоне
* от 0 до 999.
*
* Результат: Выведите N чисел, заданных во вводе, в K столбцов так, что число
* строк минимально, а столбцы имеют одинаковую высоту, за исключением последнего
* столбца, который может быть меньше. Ширина каждого столбца должна быть 4
* символа, числа должны быть выровнены по правому краю и дополнены пробелами до
* требуемой ширины. Числа должны идти в том же порядке, что и во вводе, но по
* столбцам: сначала в первом столбце сверху вниз, затем во втором столбце сверху
* вниз и так далее. Все непустые строки должны заканчиваться переводами строк,
* строки не должны содержать концевых пробелов. Гарантируется, что решение
* всегда существует.
\code
7 3                 |   1  40 700
1 2 30 40 50 600 700|   2  50
                    |  30 600
\endcode
*/
int main()
{
  int n, k;
  std::cin >> n >> k;

  typedef std::vector<int> numbers_t;
  numbers_t numbers; // 1..100 шт.
  numbers.reserve(100);

  for (int i = 0, num; i < n; ++i)
  {
    std::cin >> num;
    numbers.push_back(num);
  }

  // кол-во строк
  int rows = (n + k - 1) / k;

  for (int row = 0; row < rows; ++row)
  {
    for (int column = 0; column < k; ++column)
    {
      int idx = row + column * rows;
      if (idx >= n) break;
      std::cout << std::setw(4) << numbers[idx];
    }
    std::cout << std::endl;
  }

  // Примечание: существует комбинация, когда входные данные могут быть:
  // 9 8
  // 1 2 3 4 5 6 7 8 9
  // --
  // И расположить их получится лишь в таком виде:
  //   1   3   5   7   9
  //   2   4   6   8
  // ---
  // И это будет считаться правильным решением! не смотря на то, что колонок 5, а не 8.

  return 0;
}
