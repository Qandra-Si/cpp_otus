# отдельная сборка для libcore и doxygen-документации (используется в github actions)
set (DOXYGEN_SOLUTION core)
# отдельная сборка для 1го занятия (lesson01_cmake_basic, lesson01_cmake_generator, homework01, homework01a...)
set (LESSON01_SOLUTION core; lesson01_cmake_basic; lesson01_cmake_generator; lesson01_cmake_lib; homework01; homework01a)
# отдельная сборка для 1й части 1го занятия (helloworld_cli)
set (HELLOWORLD_CLI_SOLUTION core; homework01)
# отдельная сборка для 2й части 1го занятия (homework01a)
set (IP_FILTER_SOLUTION core; homework01a)
# отдельная сборка для 2го и 3го занятий (lesson03...)
set (LESSON03_SOLUTION lesson03_deducing_types; lesson03_decltype; lesson03_lambda; lesson03_functor; lesson03_explicit; lesson03_braced_init; lesson03_lambda_closure; lesson03_tuple; homework03_deducing_types; homework03_custom_tie; homework03_custom_tuple; lesson03_nrvo; lesson03_move; lesson03_vtempl)
# отдельная сборка для 4го занятия (lesson04_cpp1x_innovations)
set (LESSON04_SOLUTION lesson04_cpp1x_innovations)
# отдельная сборка для 5го занятия (lesson05_smart_ptr, lesson05_mleak_ctor)
set (LESSON05_SOLUTION lesson05_smart_ptr; lesson05_mleak_ctor)
# отдельная сборка для 6го занятия (lesson06_alloc, lesson06_pmr,...)
set (LESSON06_SOLUTION core; lesson06_alloc; lesson06_pmr; homework06_alloc)
# отдельная сборка для домашних заданий 6го занятия (homework06_alloc)
set (ALLOCATORS_SOLUTION core; homework06_alloc; timus с вложенными подпроектами для acm.timus.ru)
# отдельная сборка для 7го занятия (lesson07_sfinae, ...)
set (LESSON07_SOLUTION lesson07_sfinae)
# отдельная сборка для 6го и 11го занятия (timus с вложенными подпроектами для acm.timus.ru)
set (TIMUS_ACM_SOLUTION timus)
# отдельная сборка для домашнего задания 11го занятия (homework11 и timus с вложенными подпроектами для acm.timus.ru)
set (SFINAE_SOLUTION homework11_sfinae; timus)


# если указан список TARGETS, то собираем только то, что указано в списке TARGETS
if(DEFINED TARGETS)
  string(REPLACE " " ";" TARGETS_LIST ${TARGETS})
  message(STATUS "Process targets with the following cpp_otus components:")
  cpp_otus_add_subdirectory(${TARGETS_LIST})
endif()

# если указан SOLUTION, то собираем те проекты/библиотеки, которые входят в SOLUTION
if (DEFINED SOLUTION)
  if (DEFINED ${SOLUTION_UPPERCASE}_SOLUTION)
    # сборка зависимостей solution-а
    message(STATUS "Process ${SOLUTION_UPPERCASE} solution with the following cpp_otus components:")
    cpp_otus_add_subdirectory(${${SOLUTION_UPPERCASE}_SOLUTION})
  else()
    message(WARNING "Unknown solution: ${SOLUTION_UPPERCASE}_SOLUTION")
  endif()
endif()

# если не указаны ни SOLUTION, ни TARGETS, то собираем всё что есть в этой директории
if (NOT SOLUTION AND NOT TARGETS)
  file (GLOB TARGET_DIRS *)
  foreach(srcfolder ${TARGET_DIRS})
    if(IS_DIRECTORY ${srcfolder})
      get_filename_component(ONLY_NAME ${srcfolder} NAME)
      # резервируем обработку каталога tools, правила сборки в котором будут заданы внутри него самого
      if (NOT ${ONLY_NAME} STREQUAL "tools")
        unset(COMPONENT_EXCEPTION_LIST_FOUND)
        list(FIND COMPONENT_EXCEPTION_LIST ${ONLY_NAME} COMPONENT_EXCEPTION_LIST_FOUND)
        if (${COMPONENT_EXCEPTION_LIST_FOUND} EQUAL -1)
          #message(STATUS "??? ${ONLY_NAME}")
          #add_subdirectory(${ONLY_NAME})
          list(APPEND TARGET_DIRS_LIST ${ONLY_NAME})
        endif()
      endif()
    endif()
  endforeach()
  message(STATUS "Found the following cpp_otus components:")
  cpp_otus_add_subdirectory(${TARGET_DIRS_LIST})
endif()
